- hosts: win2012
  

  vars:
    ansible_site_path: "c:\\inetpub\\wwwroot\\ansibletest"
    staging_path: "c:\\deploy"
    ansible_test_staging_path: "{{ staging_path }}\\ansible-test-site-{{ ansible_date_time.year }}{{ ansible_date_time.month }}{{ ansible_date_time.day }}"

    sharepoint_diagnostic_level_debug: 0
    
    sharepoint_common:
      product_key:  'NQGJR-63HC8-XCRQH-MYVCH-3J3QR'
      
      farm_account:
        username: '{{ account_farm_username }}'
        password: '{{ account_farm_password }}'
        
      web_account:
        Domain:   '{{ account_web_domain | default(inventory_hostname | upper ) }}'
        username: '{{ account_web_username }}'
        password: '{{ account_web_password }}'
        
      service_account:
        Domain:   '{{ account_service_domain | default(inventory_hostname | upper ) }}'
        username: '{{ account_service_username }}'
        password: '{{ account_service_password }}'

      database: 'SRV4\MSSQL'
          
        
    sharepoint_installer:
      autodownload_prerequisites:   true
      download_packages_path:       'D:\SharePointInstall'
#      prerequisite_installer_path:  'E:/Prerequisiteinstaller.exe'
      prerequisite_files_path:      'D:\SharePointInstall\SharePoint_Prerequisites\PrerequisiteInstaller'
      binaries_path:                'E:\'
      
      account:
        username: '{{ account_installer_username }}'
        password: '{{ account_installer_password }}'
      
      dscResources:
      - SharepointDSC
      - xPendingReboot
      - xWebAdministration
      
      prerequsistes:
        sql_client_natif_12:
          uri:          'https://download.microsoft.com/download/F/E/D/FEDB200F-DE2A-46D8-B661-D019DFE9D470/ENU/x64/sqlncli.msi'
          filename:     'sqlncli-2012.msi'
          productid:    '49D665A2-4C2A-476E-9AB8-FCC425F526FC'
          
        sql_msodbcsql_11:
          uri:          'https://download.microsoft.com/download/5/7/2/57249A3A-19D6-4901-ACCE-80924ABEB267/ENU/x64/msodbcsql.msi'
          filename:     'msodbcsql_11.msi'
          productid:    '4294D9EB-FECF-4E55-8615-1B9EF152EE95'
          
        sync_framework:
          uri:          'https://download.microsoft.com/download/E/0/0/E0060D8F-2354-4871-9596-DC78538799CC/Synchronization.msi'
          filename:     'Synchronization.msi'
          productid:   '8438EC02-B8A9-462D-AC72-1B521349C001'
          
        AppFabric:
          uri:          'https://download.microsoft.com/download/A/6/7/A678AB47-496B-4907-B3D4-0A2D280A13C0/WindowsServerAppFabricSetup_x64.exe'
          filename:     'WindowsServerAppFabricSetup_x64.exe'
          productid:    '96E70525-4CD1-4920-9C0B-91055C79A962'
          
        windows_identity_foundation:
          uri: 'http://download.microsoft.com/download/D/7/2/D72FD747-69B6-40B7-875B-C2B40A6B2BDD/Windows6.1-KB974405-x64.msu'
          filename: 'Windows6.1-KB974405-x64.msu'
          
        identity_extensions:
          uri:          'http://download.microsoft.com/download/0/1/D/01D06854-CA0C-46F1-ADBA-EBF86010DCC6/rtm/MicrosoftIdentityExtensions-64.msi'
          filename:     'MicrosoftIdentityExtensions-64.msi'
          productid:    'F99F24BF-0B90-463E-9658-3FD2EFC3C992'
          
        microsoft_protection_client:
          uri:          'https://download.microsoft.com/download/3/C/F/3CF781F5-7D29-4035-9265-C34FF2369FA2/setup_msipc_x64.exe'          
          filename:     'setup_msipc_x64.exe'
          productid:    'EF541964-8162-4E20-8943-17FFD1666446'
          
        dotnet_462:
          uri: 'https://download.microsoft.com/download/F/9/4/F942F07D-F26F-4F30-B4E3-EBD54FABA377/NDP462-KB3151800-x86-x64-AllOS-ENU.exe'
          filename: 'NDP462-KB3151800-x86-x64-AllOS-ENU.exe'
          
        wcfdataservices_56:
          uri:          'https://download.microsoft.com/download/1/C/A/1CAA41C7-88B9-42D6-9E11-3C655656DAB1/WcfDataServices.exe'
          filename:     'WcfDataServices56.exe'
          productid:    '46910786-E4AC-41E4-A4A0-C086EA85242D'
          
        cumulative_update_appfabric:
          uri: 'https://download.microsoft.com/download/F/1/0/F1093AF6-E797-4CA8-A9F6-FC50024B385C/AppFabric-KB3092423-x64-ENU.exe'
          filename: 'AppFabric-KB3092423-x64-ENU.exe'
          
        redistribuable_cpp_2012:
          uri:          'https://download.microsoft.com/download/1/6/B/16B06F60-3B20-4FF2-B699-5E9B7962F9AE/VSU_4/vcredist_x64.exe'
          filename:     'vc_redist_2012_x64.exe'
          productid:    'CF2BEA3C-26EA-32F8-AA9B-331F7E34BA97'
          
        redistribuable_cpp_2015:
          uri:          'http://download.microsoft.com/download/9/3/F/93FCF1E7-E6A4-478B-96E7-D4B285925B00/vc_redist.x64.exe'
          filename:     'vc_redist_2015.x64.exe'
          productid:    '0D3E9E15-DE7A-300B-96F1-B4AF12B96488'
          
  tasks:

   - name: Ensure Sharepoint folders for this sample
     win_file:
       path:    '{{ item }}'
       state:   'directory'
     with_items:
     - '{{ sharepoint_installer.download_packages_path }}'
     - '{{ sharepoint_installer.prerequisite_files_path }}'
     tags: always
     
   - block:

     - name: get powershell version
       raw: 'Invoke-Command -ScriptBlock {$psversiontable.psversion | ConvertTo-Json }'
       register: powershell_version
  
     - name: Display powershell_version
       debug: var="(powershell_version.stdout |from_json)" verbosity='{{ sharepoint_diagnostic_level_debug }}'
  
     tags:
     - powershell
     
   #Ensure powershell 5.x before starting
   - block:
     - name: Download powershell if needed
       win_uri:
         url:     'http://download.microsoft.com/download/6/F/5/6F5FF66C-6775-42B0-86C4-47D41F2DA187/Win8.1AndW2K12R2-KB3191564-x64.msu'
         dest:    '{{ sharepoint_installer.download_packages_path }}\Win8.1AndW2K12R2-KB3191564-x64.msu'

     - name: Install powershell
       raw: '"{{ sharepoint_installer.download_packages_path }}\Win8.1AndW2K12R2-KB3191564-x64.msu /quiet"'
         
     - name: Reboot server after powershell installation
       win_reboot:
       
     when: '(powershell_version.stdout |from_json).Major < 5'    
     tags:
     - powershell
   
   - block:  
     - name: "win lcm configuration disabled "       
       win_lcm5:
         refresh_mode: 'Disabled'
         
     - name: Download Powershell Modules and DscResources
       win_oneget:
         name: '{{ item }}'
       with_items: '{{ sharepoint_installer.dscResources }}'  
     
     - name: Download prerequisites to the servers
       win_uri:
         url: '{{ item.value.uri }}'
         dest: '{{ sharepoint_installer.prerequisite_files_path }}\{{ item.value.filename }}'
       with_dict: '{{ sharepoint_installer.prerequsistes }}'
       when: 'sharepoint_installer.autodownload_prerequisites'
        
     tags:
     - bootstrap

   - block:
     - name: Install Package before execute sharepoint prerequisites
       win_package:
         name:      '{{ item.key }}'
         path:      '{{ sharepoint_installer.prerequisite_files_path }}\{{ item.value.filename }}'
         productid: '{{ item.value.productid }}'
         arguments: '/quiet'
       with_dict: '{{ sharepoint_installer.prerequsistes }}'
       when: 'item.value.productid is defined'
       register: packages_status
       
     - name: Display packages_status
       debug: var=packages_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
       
     tags:
       - win_package
       
     
#xSPInstallPrereqs InstallPrerequisites
#{
#InstallerPath = "C:\SPInstall\Prerequisiteinstaller.exe"
#OnlineMode = $true
#SQLNCli = "C:\SPInstall\prerequisiteinstallerfiles\sqlncli.msi"
#PowerShell = "C:\SPInstall\prerequisiteinstallerfiles\Windows6.1-KB2506143-x64.msu"
#NETFX = "C:\SPInstall\prerequisiteinstallerfiles\dotNetFx45_Full_setup.exe"
#IDFX = "C:\SPInstall\prerequisiteinstallerfiles\Windows6.1-KB974405-x64.msu"
#Sync = "C:\SPInstall\prerequisiteinstallerfiles\Synchronization.msi"
#AppFabric = "C:\SPInstall\prerequisiteinstallerfiles\WindowsServerAppFabricSetup_x64.exe"
#IDFX11 = "C:\SPInstall\prerequisiteinstallerfiles\MicrosoftIdentityExtensions-64.msi"
#MSIPCClient = "C:\SPInstall\prerequisiteinstallerfiles\setup_msipc_x64.msi"
#WCFDataServices = "C:\SPInstall\prerequisiteinstallerfiles\WcfDataServices.exe"
#KB2671763 = "C:\SPInstall\prerequisiteinstallerfiles\AppFabric1.1-RTM-KB2671763-x64-ENU.exe"
#WCFDataServices56 = "C:\SPInstall\prerequisiteinstallerfiles\WcfDataServices56.exe"
#Ensure = "Present"
#}  
#   - name: "win lcm configuration "       
#     win_lcm5:
#       refresh_mode: 'Push'
#       

   - block:
#     - name: Verif if sharepoint installer has been already downloaded
#       win_stat:
#         path: '{{ sharepoint_installer.download_packages_path }}\Sharepoint2016withsp1.img'
#       register: file_info
#         
#     - name: Display file_info
#       debug: var=file_info verbosity='{{ sharepoint_diagnostic_level_debug }}'
#       
#     tags:
#     - fileinfo
     
     - name: Download Sharepoint Trial Version
       win_uri:
         url:     'https://download.microsoft.com/download/0/0/4/004EE264-7043-45BF-99E3-3F74ECAE13E5/officeserver.img'
         dest:    '{{ sharepoint_installer.download_packages_path }}\Sharepoint2016withsp1.img'
       when: 'file_info is defined and file_info.stat.exists != true'  
         
     - name: Mount the Sharepoint image
       win_disk_image:
         image_path: '{{ sharepoint_installer.download_packages_path }}\Sharepoint2016withsp1.img'
         state: present
       register: disk_image_out
       
     tags:
     - spinstallprereqs
     - spinstall
     
   - name: Test xPendingReboot
     win_xpendingreboot:
       name: 'BeforeSoftwareInstall'
     register: pendingreboot_status
     tags:
     - spinstallprereqs
     
   - name: Display pendingreboot_status
     debug: var=pendingreboot_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spinstallprereqs
     
   - name: Reboot server after prerequisite installation if needed
     win_reboot:
     when: 'pendingreboot_status.changed'
     tags:
     - spinstallprereqs
     
   - name: Install Sharepoint Prerequisites
     win_spinstallprereqs:
       InstallerPath:       '{{ sharepoint_installer.prerequisite_installer_path | default(disk_image_out.mount_path ~ "Prerequisiteinstaller.exe") }}'
       OnlineMode: false
       SQLNCli:             '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.sql_client_natif_12.filename }}'
       Sync:                '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.sync_framework.filename }}'
       AppFabric:           '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.AppFabric.filename }}'
       IDFX11:              '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.identity_extensions.filename }}'
       MSIPCClient:         '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.microsoft_protection_client.filename }}'
       KB3092423:           '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.cumulative_update_appfabric.filename }}'
       WCFDataServices56:   '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.wcfdataservices_56.filename }}'
       DotNetFx:            '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.dotnet_462.filename }}'
       MSVCRT11:            '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.redistribuable_cpp_2012.filename }}'
       MSVCRT14:            '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.redistribuable_cpp_2015.filename }}'
       ODBC:                '{{ sharepoint_installer.prerequisite_files_path }}\{{ sharepoint_installer.prerequsistes.sql_msodbcsql_11.filename }}'
       #Don't support Uninstall !!
       Ensure:              'Present' 
     register: prerequisites_status
     tags:
     - spinstallprereqs
       
   - name: Display prerequisites_status
     debug: var=prerequisites_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spinstallprereqs

   - name: Test xPendingReboot
     win_xpendingreboot:
       name: 'AfterSoftwareInstall'
     register: pendingreboot_status
     tags:
     - spinstallprereqs
     
   - name: Display pendingreboot_status
     debug: var=pendingreboot_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spinstallprereqs
     
   - name: Reboot server after prerequisite installation if needed
     win_reboot:
     when: 'pendingreboot_status.changed'
     tags:
     - spinstallprereqs
     
#xSPInstall InstallBinaries
#{
#BinaryDir = "C:\SPInstall"
#ProductKey = $ProductKey
#Ensure = "Present"
#DependsOn = "[xSPInstallPrereqs]InstallPrerequisites"
#}
    
   - name: Install Sharepoint Binaries
     win_spinstall:
       BinaryDir:   '{{ disk_image_out.mount_path | default(sharepoint_installer.binaries_path) }}'
       ProductKey:  '{{ sharepoint_common.product_key }}'
       Ensure:      'Present' 
     register: spinstall_status
     tags:
     - spinstall
     
   - name: Display spinstall_status
     debug: var=spinstall_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spinstall

   
        
#**********************************************************
# IIS clean up
#
# This section removes all default sites and application
# pools from IIS as they are not required
#**********************************************************
#xWebAppPool RemoveDotNet2Pool { Name = ".NET v2.0"; Ensure = "Absent"; DependsOn = "[xSPInstallPrereqs]InstallPrerequisites" }
#xWebAppPool RemoveDotNet2ClassicPool { Name = ".NET v2.0 Classic"; Ensure = "Absent"; DependsOn = "[xSPInstallPrereqs]InstallPrerequisites" }
#xWebAppPool RemoveDotNet45Pool { Name = ".NET v4.5"; Ensure = "Absent"; DependsOn = "[xSPInstallPrereqs]InstallPrerequisites"; }
#xWebAppPool RemoveDotNet45ClassicPool { Name = ".NET v4.5 Classic"; Ensure = "Absent"; DependsOn = "[xSPInstallPrereqs]InstallPrerequisites"; }
#xWebAppPool RemoveClassicDotNetPool { Name = "Classic .NET AppPool"; Ensure = "Absent"; DependsOn = "[xSPInstallPrereqs]InstallPrerequisites" }
#xWebAppPool RemoveDefaultAppPool { Name = "DefaultAppPool"; Ensure = "Absent"; DependsOn = "[xSPInstallPrereqs]InstallPrerequisites" }
#xWebSite RemoveDefaultWebSite { Name = "Default Web Site"; Ensure = "Absent"; PhysicalPath = "C:\inetpub
     
   - name: Remove default web site
     win_xwebsite:
       name: "Default Web Site"
       Ensure: 'Absent'
     register: spwebsite_status
     tags:
     - cleanup

   - name: Display spwebsite_status
     debug: var=spwebsite_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - cleanup

   - name: Remove default application Pool
     win_webapppool:
       name: '{{ item }}'
       Ensure: 'Absent'
     with_items:
       - '.NET v2.0'
       - '.NET v2.0 Classic'
       - '.NET v4.5'
       - 'Classic .NET AppPool'
       - 'DefaultAppPool'
     register: webapppool_status
     tags:
     - cleanup

   - name: Display webapppool_status
     debug: var=webapppool_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - cleanup


        #**********************************************************
        # Basic farm configuration
        #
        # This section creates the new SharePoint farm object, and
        # provisions generic services and components used by the
        # whole farm
        #**********************************************************
#        SPFarm CreateSPFarm
#        {
#            Ensure                   = "Present"
#            DatabaseServer           = "sql.contoso.com"
#            FarmConfigDatabaseName   = "SP_Config"
#            Passphrase               = $Passphrase
#            FarmAccount              = $FarmAccount
#            PsDscRunAsCredential     = $SPSetupAccount
#            AdminContentDatabaseName = "SP_AdminContent"
#            RunCentralAdmin          = $true
#            DependsOn                = "[SPInstall]InstallSharePoint"
#        }

   - name: Create Basic SP Farm
     win_spfarm:
       DatabaseServer: '{{ sharepoint_common.database }}'
       Passphrase_username: 'fakeuser'
       Passphrase_password: 'TestSup.12'
       FarmAccount_username: '{{ sharepoint_common.farm_account.username }}'
       FarmAccount_password: '{{ sharepoint_common.farm_account.password }}'
       PsDscRunAsCredential_username: '{{ sharepoint_installer.account.username }}'
       PsDscRunAsCredential_password: '{{ sharepoint_installer.account.password }}'
       AdminContentDatabaseName: 'SP_AdminContent'
       FarmConfigDatabaseName: 'SP_Config'
       RunCentralAdmin: true
       Ensure: 'Present'
     register: spfarm_status
     tags:
     - spfarm

   - name: Display spfarm_status
     debug: var=spfarm_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spfarm

     
#        SPManagedAccount ServicePoolManagedAccount
#        {
#            AccountName          = $ServicePoolManagedAccount.UserName
#            Account              = $ServicePoolManagedAccount
#            PsDscRunAsCredential = $SPSetupAccount
#            DependsOn            = "[SPFarm]CreateSPFarm"
#        }
#        SPManagedAccount WebPoolManagedAccount
#        {
#            AccountName          = $WebPoolManagedAccount.UserName
#            Account              = $WebPoolManagedAccount
#            PsDscRunAsCredential = $SPSetupAccount
#            DependsOn            = "[SPFarm]CreateSPFarm"
#        }     
#

#User UserExample
#{
#    Ensure = "Present"  # To ensure the user account does not exist, set Ensure to "Absent"
#    UserName = "SomeName"
#    Password = $passwordCred # This needs to be a credential object
#    DependsOn = "[Group]GroupExample" # Configures GroupExample first
#}

   - name: Create new User
     win_user:
       UserName:            '{{ item.username }}'
       Password_username:   '{{ item.Domain }}\{{ item.username }}'
       Password_password:   '{{ item.password }}'
       Ensure: 'Present'
     with_items:
     - '{{ sharepoint_common.service_account }}'
     - '{{ sharepoint_common.web_account }}'
     register: user_status
     tags:
     - user
     
     
   - name: Display user_status
     debug: var=user_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - user
       

   - name: Create SP Managed Accounts
     win_spmanagedaccount:
       AccountName:                     '{{ item.username }}'  
       Account_username:                '{{ item.Domain }}\{{ item.username }}'
       Account_password:                '{{ item.password }}'
       PsDscRunAsCredential_username:   '{{ sharepoint_installer.account.username }}'
       PsDscRunAsCredential_password:   '{{ sharepoint_installer.account.password }}'
     with_items:
     - '{{ sharepoint_common.service_account }}'
     - '{{ sharepoint_common.web_account }}'
     register: spmanagedaccount_status
     tags:
     - spmanagedaccount
     
     
   - name: Display spmanagedaccount_status
     debug: var=spmanagedaccount_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spmanagedaccount


#        SPDiagnosticLoggingSettings ApplyDiagnosticLogSettings
#        {
#            PsDscRunAsCredential                        = $SPSetupAccount
#            LogPath                                     = "C:\ULS"
#            LogSpaceInGB                                = 5
#            AppAnalyticsAutomaticUploadEnabled          = $false
#            CustomerExperienceImprovementProgramEnabled = $true
#            DaysToKeepLogs                              = 7
#            DownloadErrorReportingUpdatesEnabled        = $false
#            ErrorReportingAutomaticUploadEnabled        = $false
#            ErrorReportingEnabled                       = $false
#            EventLogFloodProtectionEnabled              = $true
#            EventLogFloodProtectionNotifyInterval       = 5
#            EventLogFloodProtectionQuietPeriod          = 2
#            EventLogFloodProtectionThreshold            = 5
#            EventLogFloodProtectionTriggerPeriod        = 2
#            LogCutInterval                              = 15
#            LogMaxDiskSpaceUsageEnabled                 = $true
#            ScriptErrorReportingDelay                   = 30
#            ScriptErrorReportingEnabled                 = $true
#            ScriptErrorReportingRequireAuth             = $true
#            DependsOn                                   = "[SPFarm]CreateSPFarm"
#        }

   - name: Apply Diagnostic Log Settings 
     win_spdiagnosticloggingsettings:
       PsDscRunAsCredential_username: '{{ sharepoint_installer.account.username }}'
       PsDscRunAsCredential_password: '{{ sharepoint_installer.account.password }}'
       LogPath:                                     'C:\ULS'
       LogSpaceInGB:                                5
       AppAnalyticsAutomaticUploadEnabled:          false
       CustomerExperienceImprovementProgramEnabled: true
       DaysToKeepLogs:                              7
       DownloadErrorReportingUpdatesEnabled:        false
       ErrorReportingAutomaticUploadEnabled:        false
       ErrorReportingEnabled:                       false
       EventLogFloodProtectionEnabled:              true
       EventLogFloodProtectionNotifyInterval:       5
       EventLogFloodProtectionQuietPeriod:          2
       EventLogFloodProtectionThreshold:            5
       EventLogFloodProtectionTriggerPeriod:        2
       LogCutInterval:                              15
       LogMaxDiskSpaceUsageEnabled:                 true
       ScriptErrorReportingDelay:                   30
       ScriptErrorReportingEnabled:                 true
       ScriptErrorReportingRequireAuth:             true       
     register: spdiagnosticloggingsettings_status
     tags:
     - spdiagnosticloggingsettings
     
     
   - name: Display spdiagnosticloggingsettings_status
     debug: var=spdiagnosticloggingsettings_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spdiagnosticloggingsettings
     

     
#        SPUsageApplication UsageApplication 
#        {
#            Name                  = "Usage Service Application"
#            DatabaseName          = "SP_Usage"
#            UsageLogCutTime       = 5
#            UsageLogLocation      = "C:\UsageLogs"
#            UsageLogMaxFileSizeKB = 1024
#            PsDscRunAsCredential  = $SPSetupAccount
#            DependsOn             = "[SPFarm]CreateSPFarm"
#        }
     
 
   - name: Configure Usage application
     win_spusageapplication:
       Name:                          'Usage Service Application'
       DatabaseName:                  'SP_Usage'
       UsageLogCutTime:               5
       UsageLogLocation:              'C:\UsageLogs'
       UsageLogMaxFileSizeKB:         1024
       PsDscRunAsCredential_username: '{{ sharepoint_installer.account.username }}'
       PsDscRunAsCredential_password: '{{ sharepoint_installer.account.password }}'
     register: spusageapplication_status
     tags:
     - spusageapplication
     
     
   - name: Display spusageapplication_status
     debug: var=spusageapplication_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spusageapplication
       

#        SPStateServiceApp StateServiceApp
#        {
#            Name                 = "State Service Application"
#            DatabaseName         = "SP_State"
#            PsDscRunAsCredential = $SPSetupAccount
#            DependsOn            = "[SPFarm]CreateSPFarm"
#        }

   - name: Configure State Service  Application
     win_spstateserviceapp:
       Name:                            'State Service Application'
       DatabaseName:                    'SP_State'
       PsDscRunAsCredential_username:   '{{ sharepoint_installer.account.username }}'
       PsDscRunAsCredential_password:   '{{ sharepoint_installer.account.password }}'
     register: spstateserviceapp_status
     tags:
     - spstateserviceapp
     
     
   - name: Display spstateserviceapp_status
     debug: var=spstateserviceapp_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spstateserviceapp
     

#        SPDistributedCacheService EnableDistributedCache
#        {
#            Name                 = "AppFabricCachingService"
#            Ensure               = "Present"
#            CacheSizeInMB        = 1024
#            ServiceAccount       = $ServicePoolManagedAccount.UserName
#            PsDscRunAsCredential = $SPSetupAccount
#            CreateFirewallRules  = $true
#            DependsOn            = @('[SPFarm]CreateSPFarm','[SPManagedAccount]ServicePoolManagedAccount')
#        }
     
   - name: Enable distributed cache
     win_spdistributedcacheservice:
       Name:                            'AppFabricCachingService'
       Ensure:                          'Present'
       CacheSizeInMB:                   1024
       ServiceAccount:                  '{{ sharepoint_common.service_account.username }}'
       CreateFirewallRules:             true
       PsDscRunAsCredential_username:   '{{ sharepoint_installer.account.username }}'
       PsDscRunAsCredential_password:   '{{ sharepoint_installer.account.password }}'
     register: spdistributedcacheservice_status
     tags:
     - spdistributedcacheservice
     
     
   - name: Display spdistributedcacheservice_status
     debug: var=spdistributedcacheservice_status verbosity='{{ sharepoint_diagnostic_level_debug }}'
     tags:
     - spdistributedcacheservice

     
       
#  - name: create new website's directory
#    win_file: path={{ ansible_site_path }} state=directory
#
#  - name: Install IIS Web-Server with sub features and management tools
#    win_feature:
#      name: Web-Server
#      state: present
#      restart: True
#      include_sub_features: True
#      include_management_tools: True
#      
#  - name: Remove default web site
#    win_xwebsite:
#      name: "Default Web Site"
#      Ensure: 'Absent'
#      
#  - name: create new website
#    win_xwebsite:
#      name: "Ansible Test Site"
#      state: Stopped
#      PhysicalPath: "{{ ansible_site_path }}"
#      BindingInfo: "{MSFT_xWebBindingInformation}
#                    {
#                      Protocol  = http,
#                      Port      = 80,
#                      IPAddress = *,
#                      HostName = test4
#                    },
#                    {MSFT_xWebBindingInformation}
#                    {
#                      Protocol  = https,
#                      IPAddress = *,
#                      HostName = test4ssl,
#                      CertificateThumbprint=FCB7FF5B81680ABFA3F273A7855113CB0211641D,
#                      CertificateStoreName=My
#                    }"
#      AutoInstallModule: true
#      AutoConfigureLcm: true
#
#  - name: create new website2
#    win_xwebsite:
#      name: "Ansible Test Site2"
#      state: Started
#      PhysicalPath: "{{ ansible_site_path }}"
#      BindingInfo: "{MSFT_xWebBindingInformation}
#                    {
#                      Protocol  = http,
#                      Port      = 80,
#                      IPAddress = *,
#                      HostName = test2
#                    }"
#      AutoInstallModule: true
#      AutoConfigureLcm: true
#
#  - name: Stop website
#    win_xwebsite:
#      name: "Ansible Test Site"
#      state: Started
#
#  - name: create new website3
#    win_xwebsite:
#      name: "Ansible Test Site3"
#      state: Started
#      PhysicalPath: "{{ ansible_site_path }}"
#      BindingInfo: "{MSFT_xWebBindingInformation}
#                    {
#                      Protocol  = https,
#                      IPAddress = *,
#                      CertificateThumbprint=E837756CA6FA2F17016CB95B738222784E012DFB,
#                      CertificateStoreName=WebHosting
#                    }"
#      
      